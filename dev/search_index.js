var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = PythonStructs","category":"page"},{"location":"#PythonStruct","page":"Home","title":"PythonStruct","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for PythonStructs.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [PythonStructs]","category":"page"},{"location":"#PythonStructs.PythonStructs","page":"Home","title":"PythonStructs.PythonStructs","text":"PythonStructs\n\nThe PythonStructs package implements the Python structs standard library in Julia.\n\n\n\n\n\n","category":"module"},{"location":"#PythonStructs.BigEndianModifier","page":"Home","title":"PythonStructs.BigEndianModifier","text":"BigEndianModifier = Modifier{:big_endian, :standard, :none}\n\nbyte_order :big_endian\nsize :standard\nalignment :none\n\n\n\n\n\n","category":"type"},{"location":"#PythonStructs.LittleEndianModifier","page":"Home","title":"PythonStructs.LittleEndianModifier","text":"LittleEndianModifier = Modifier{:little_endian, :standard, :none}\n\nbyte_order :little_endian\nsize :standard\nalignment :none\n\n\n\n\n\n","category":"type"},{"location":"#PythonStructs.Modifier","page":"Home","title":"PythonStructs.Modifier","text":"Modifier{byte_order, size, alignment}()\n\nModifier indicates how a Python struct string is interpreted. It is usually determined by the first character of the string.\n\nArguments\n\nbyte_order is either :native (default), :littleendian, or :bigendian\nsize is either :native (default) or :standard\nalignment is either :native (default) or :none\n\nAccessing Parameters\n\nModifier parameters can be accessed via the following access methods applied to either the Modifier type or an instance.\n\nbyte_order_param\nsize_param\nalignment_param\n\nModifier parameters can also be accessed via the following properties of a Modifier instance.\n\n.byte_order\n.size\n.alignment\n\nConstants\n\nNativeModifier, '@', corresponds to Modifier{:native, :native, :native}\nNativeStandardModifier, '=', corresponds to Modifier{:native, :standard, :none}\nLittleEndianModifier, <, corresponds to Modifier{:little_endian, :standard, :none}\nBigEndianModifier, <, corresponds to Modifier{:big_endian, :standard, :none}\nNetworkModifier, !, is the same as BigEndianModifier\n\nExamples\n\njulia> LittleEndianModifier\nLittleEndianModifier (alias for PythonStructs.Modifier{:little_endian, :standard, :none})\n\njulia> m = LittleEndianModifier()\nLittleEndianModifier()\n\njulia> m.byte_order\n:little_endian\n\njulia> m.size\n:standard\n\njulia> m.alignment\n:none\n\njulia> PythonStructs.byte_order_param(PythonStructs.NativeModifier)\n:native\n\nExtended Help\n\nEndianness\n\nEndianness indicates the order of the bytes for multiple byte number types.\n\nLittle endian order has the least significant byte (LSB) come first.\nBig endian order has the most significant byte (MSB) come first.\n\nSize\n\nSize influences how the type characters are mapped to machine types.\n\nNative size corresponds to C types on the current system. For example, 'l' corresponds to Clong, or Int64 on 64-bit systems.\nStandard size corresponds to fixed-size machine types that may  differ from their native size counterparts. For example, 'l' corresponds to Int32.\n\nAlignment\n\nAlignment influences whether padding bytes are employed or not.\n\nNative alignment corresponds with how C and Julia use padding bytes.\nNo alignment (none) does not use padding bytes.\n\n\n\n\n\n","category":"type"},{"location":"#PythonStructs.NativeModifier","page":"Home","title":"PythonStructs.NativeModifier","text":"NativeModifier = Modifier{:native, :native, :native}\n\nThis constant is the default Modifier.\n\nbyte_order :native\nsize :native\nalignment :native\n\n\n\n\n\n","category":"type"},{"location":"#PythonStructs.NativeStandardModifier","page":"Home","title":"PythonStructs.NativeStandardModifier","text":"NativeStandardModifier = Modifier{:native, :standard, :none}}\n\nbyte_order :native\nsize :standard\nalignment :none\n\n\n\n\n\n","category":"type"},{"location":"#PythonStructs.NetworkModifier","page":"Home","title":"PythonStructs.NetworkModifier","text":"NetworkModifier = BigEndianModifier\n\nAlias for BigEndianModifier\n\n\n\n\n\n","category":"type"},{"location":"#PythonStructs.NullByte","page":"Home","title":"PythonStructs.NullByte","text":"NullByte\n\nRepresents 0x00 corresponding with 'x'.\n\n\n\n\n\n","category":"type"},{"location":"#PythonStructs.PythonStruct","page":"Home","title":"PythonStructs.PythonStruct","text":"PythonStruct{T, M <: Modifier}(arg::T)\nPythonStruct{T, M <: Modifier}(args...)\nPythonStruct(string::AbstractString)\n\nWrap a type T with Modifier parameters or construct a PythonStruct type from an AbstractString.\n\n\n\n\n\n","category":"type"},{"location":"#PythonStructs.ZeroCount","page":"Home","title":"PythonStructs.ZeroCount","text":"ZeroCount{T}\n\nRepresents a 0 count of a type, which has some special meanings.\n\n\n\n\n\n","category":"type"},{"location":"#Base.string-Tuple{Type{<:PythonStruct}}","page":"Home","title":"Base.string","text":"string(s::Type{<: PythonStruct})\n\nConvert a PythonStruct to a Python struct format string. The conversion is done with standard types.\n\n\n\n\n\n","category":"method"},{"location":"#PythonStructs.calcsize-Union{Tuple{Type{<:PythonStruct{T, M}}}, Tuple{M}, Tuple{T}} where {T, M<:(PythonStructs.Modifier{<:Any, <:Any, :native})}","page":"Home","title":"PythonStructs.calcsize","text":"calcsize(::Type{<: PythonStruct})\n\nCalculate the size of a PythonStruct type. This differs from sizeof in the following ways.\n\nThe inclusion of padding bytes depends on the Modifier alignment.\nTrailing padding bytes are not included.\n\n\n\n\n\n","category":"method"},{"location":"#PythonStructs.modifier","page":"Home","title":"PythonStructs.modifier","text":"modifier(c::Char)\nmodifier(str::AbstractString)\n\nObtain the Modifier from a character. If an AbstractString is provided, the first character is sued.\n\n'@' corresponds to Modifier(:native,        :native,   :native)\n= corresponds to Modifier(:native,        :standard, :none)\n< corresponds to Modifier(:little_endian, :standard, :none)\n> corresponds to Modifier(:big_endian,    :standard, :none)\n! corresponds to Modifier(:big_endian,    :standard, :none)\n\n\n\n\n\n","category":"function"},{"location":"#PythonStructs.modifier_char-Union{Tuple{Type{<:PythonStruct{T, M}}}, Tuple{M}, Tuple{T}} where {T, M}","page":"Home","title":"PythonStructs.modifier_char","text":"modifier_char(s::Type{<: PythonStruct})\n\nGet the modifier character for a particular Modifier constant.\n\n\n\n\n\n","category":"method"},{"location":"#PythonStructs.pack-Union{Tuple{PS}, Tuple{IO, PS}} where PS<:PythonStruct","page":"Home","title":"PythonStructs.pack","text":"pack([io::IO], s::PS) where PS <: PythonStruct\npack(PythonStruct{T,M}, [io::IO], args...)\npack(s::AbstractString, [io::IO], args...)\n\nPack a PythonStruct into bytes. If io is provided, the bytes are written the IO object. Otherwise, the bytes are returned as a Vector{UInt8}.\n\n\n\n\n\n","category":"method"},{"location":"#PythonStructs.python_struct_lower-Tuple{AbstractString}","page":"Home","title":"PythonStructs.python_struct_lower","text":"python_struct_lower(pythonstruct_string::AbstractString)\n\nConvert a general Python struct string into a simpler form. Numbers are parsed and are translated into repeated type characters. Zero count types are retained.\n\nPrivate API\n\n\n\n\n\n","category":"method"},{"location":"#PythonStructs.python_struct_to_native_type-Tuple{AbstractString}","page":"Home","title":"PythonStructs.python_struct_to_native_type","text":"python_struct_to_native_type(pystruct_string::AbstractString)\n\nUse python_struct_to_type with the native format dictionary.\n\nPrivate API\n\n\n\n\n\n","category":"method"},{"location":"#PythonStructs.python_struct_to_standard_type-Tuple{AbstractString}","page":"Home","title":"PythonStructs.python_struct_to_standard_type","text":"python_struct_to_standard_type(pystruct_string::AbstractString)\n\nUse python_struct_to_type with the standard format dictionary.\n\nPrivate API\n\n\n\n\n\n","category":"method"},{"location":"#PythonStructs.python_struct_to_type-Tuple{AbstractString, AbstractDict}","page":"Home","title":"PythonStructs.python_struct_to_type","text":"python_struct_to_type(pystruct_string::AbstractString, dict::AbstractDict)\n\nConvert a Python struct string to be a Julia Tuple type.\n\nPrivate API\n\n\n\n\n\n","category":"method"},{"location":"#PythonStructs.python_struct_to_type-Tuple{AbstractString, PythonStructs.Modifier}","page":"Home","title":"PythonStructs.python_struct_to_type","text":"python_struct_to_type(pystruct_string::AbstractString)\npython_struct_to_type(pystruct_string::AbstractString, m::Modifier)\npython_struct_to_type(pystruct_symbol::Symbol, modifier = default_modifier)\n\nConvert a Python struct string to a PythonStruct type.\n\nPrivate API\n\n\n\n\n\n","category":"method"},{"location":"#PythonStructs.@pystruct_str-Tuple{Any}","page":"Home","title":"PythonStructs.@pystruct_str","text":"pystruct\"\"\n\nCreate a PythonStruct type from type characters.\n\n\n\n\n\n","category":"macro"}]
}
